Task 1: Employee Performance Review
Objective: Generate a report showcasing the employees 
           with the top 5 highest average sales per transaction
		   who have made at least 5 transactions.

CREATE TABLE Employees (
    EmployeeID INT,
    Name VARCHAR(100),
    Department VARCHAR(50),
    PRIMARY KEY (EmployeeID)
);

CREATE TABLE Transactions (
    TransactionID INT,
    EmployeeID INT,
    Amount DECIMAL(10, 2),
    TransactionDate DATE,
    PRIMARY KEY (TransactionID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

INSERT INTO Employees (EmployeeID, Name, Department) VALUES
(1, 'John Smith', 'Sales'),
(2, 'Jane Doe', 'Marketing'),
(3, 'Alice Johnson', 'Sales'),
(4, 'Mike Brown', 'Marketing');

INSERT INTO Transactions (TransactionID, EmployeeID, Amount, TransactionDate) VALUES
(101, 1, 500.00, '2023-01-10'),
(102, 1, 450.00, '2023-01-12'),
(103, 2, 400.00, '2023-01-15'),
(104, 3, 600.00, '2023-01-20'),
(105, 3, 650.00, '2023-01-25'),
(106, 1, 200.00, '2023-02-01'),
(107, 4, 550.00, '2023-02-05'),
(108, 4, 600.00, '2023-02-10'),
(109, 4, 700.00, '2023-02-15'),
(110, 4, 650.00, '2023-02-20'),
(111, 4, 300.00, '2023-02-25'),
(112, 4, 450.00, '2023-02-28'),
(113, 2, 500.00, '2023-03-05'),
(114, 2, 550.00, '2023-03-10'),
(115, 2, 600.00, '2023-03-15');

SELECT 
    e.EmployeeID,
    e.Name,
    e.Department,
    AVG(t.Amount) AS AverageSalesPerTransaction,
    COUNT(t.TransactionID) AS NumberOfTransactions
FROM 
    Employees e
JOIN 
    Transactions t ON e.EmployeeID = t.EmployeeID
GROUP BY 
    e.EmployeeID, e.Name, e.Department
HAVING 
    COUNT(t.TransactionID) >= 10
ORDER BY 
    AverageSalesPerTransaction DESC
LIMIT 5;
=====================================================================================================================================
=====================================================================================================================================
=====================================================================================================================================

Task 2: Inventory Management
Objective: Identify categories that have consistently low stock items.
		   Display categories where the average stock is less than 50 units.

CREATE TABLE Categories (
    CategoryID INT,
    CategoryName VARCHAR(100),
    PRIMARY KEY (CategoryID)
);

CREATE TABLE Products (
    ProductID INT,
    ProductName VARCHAR(100),
    CategoryID INT,
    InStock INT,
    PRIMARY KEY (ProductID),
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

INSERT INTO Categories (CategoryID, CategoryName) VALUES
(1, 'Electronics'),
(2, 'Clothing'),
(3, 'Furniture');

INSERT INTO Products (ProductID, ProductName, CategoryID, InStock) VALUES
(1, 'TV', 1, 30),
(2, 'Radio', 1, 45),
(3, 'T-Shirt', 2, 200),
(4, 'Sofa', 3, 15),
(5, 'Chair', 3, 20);


select c.CategoryName, avg(p.InStock)
from categories c
inner join products p
on c.CategoryID = p.CategoryID
group by c.CategoryName
having avg(p.instock) < 50

=====================================================================================================================================
=====================================================================================================================================
=====================================================================================================================================

Task 3: Reward Program Qualification
Objective: Determine eligible customers for a new premium reward program.
		   Customers qualify only if their average purchase amount exceeds $1000
		   and they have made at least 3 purchases last year.
		   
CREATE TABLE Customers (
    CustomerID INT,
    CustomerName VARCHAR(100),
    PRIMARY KEY (CustomerID)
);

CREATE TABLE Purchases (
    PurchaseID INT,
    CustomerID INT,
    Amount DECIMAL(10, 2),
    PurchaseDate DATE,
    PRIMARY KEY (PurchaseID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

INSERT INTO Customers (CustomerID, CustomerName) VALUES
(1, 'Laura Smith'),
(2, 'Derek Hale'),
(3, 'Monica Geller'),
(4, 'Chandler Bing');

INSERT INTO Purchases (PurchaseID, CustomerID, Amount, PurchaseDate) VALUES
(101, 1, 1100.00, '2022-05-23'),
(102, 1, 950.00, '2022-07-11'),
(103, 1, 1200.00, '2022-09-10'),
(104, 2, 1025.00, '2022-01-20'),
(105, 2, 800.00, '2022-03-17'),
(106, 4, 1600.00, '2022-06-25'),
(107, 4, 1700.00, '2022-10-30'),
(108, 3, 2000.00, '2022-04-10');


SELECT 
    c.CustomerID,
    c.CustomerName,
    YEAR(p.PurchaseDate) AS PurchaseYear,
    AVG(p.Amount) AS AveragePurchaseAmount,
    COUNT(p.PurchaseID) AS NumberOfPurchases
FROM 
    Customers c
JOIN 
    Purchases p ON c.CustomerID = p.CustomerID
GROUP BY 
    c.CustomerID, c.CustomerName, YEAR(p.PurchaseDate)
HAVING 
    AVG(p.Amount) > 1000 AND COUNT(p.PurchaseID) >= 3;
=====================================================================================================================================
=====================================================================================================================================
=====================================================================================================================================

Task 4: Product Sales Performance
Objective: Calculate monthly sales totals for each product category 
		   and identify months where total sales did not meet the minimum threshold of $5000.
		   
CREATE TABLE ProductCategories (
    CategoryID INT,
    CategoryName VARCHAR(100),
    PRIMARY KEY (CategoryID)
);

CREATE TABLE Sales (
    SaleID INT,
    ProductID INT,
    CategoryID INT,
    SaleAmount DECIMAL(10, 2),
    SaleDate DATE,
    PRIMARY KEY (SaleID),
    FOREIGN KEY (CategoryID) REFERENCES ProductCategories(CategoryID)
);

INSERT INTO ProductCategories (CategoryID, CategoryName) VALUES
(1, 'Electronics'),
(2, 'Home Appliances');

INSERT INTO Sales (SaleID, ProductID, CategoryID, SaleAmount, SaleDate) VALUES
(1, 1001, 1, 1500.00, '2023-01-15'),
(2, 1002, 1, 4000.00, '2023-01-20'),
(3, 2001, 2, 800.00, '2023-01-25'),
(4, 1003, 1, 3200.00, '2023-02-10'),
(5, 2002, 2, 1100.00, '2023-02-20');

SELECT 
    pc.CategoryID,
    pc.CategoryName,
    DATE_FORMAT(s.SaleDate, '%Y-%m') AS SaleMonth, -- Extract year and month
    SUM(s.SaleAmount) AS TotalSales
FROM 
    ProductCategories pc
JOIN 
    Sales s ON pc.CategoryID = s.CategoryID
GROUP BY 
    pc.CategoryID, pc.CategoryName, DATE_FORMAT(s.SaleDate, '%Y-%m')
HAVING 
    SUM(s.SaleAmount) < 5000;
=====================================================================================================================================
=====================================================================================================================================
=====================================================================================================================================

Task 5: Employee Time Logging

Objective: List departments where the total overtime hours logged in the last month exceeded 100 hours,
           considering only those employees who average more than 10 overtime hours per week.
		   
CREATE TABLE Departments (
    DepartmentID INT,
    DepartmentName VARCHAR(100),
    PRIMARY KEY (DepartmentID)
);

CREATE TABLE TimeLogs (
    LogID INT,
    EmployeeID INT,
    DepartmentID INT,
    OvertimeHours INT,
    LogDate DATE,
    PRIMARY KEY (LogID),
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

INSERT INTO Departments (DepartmentID, DepartmentName) VALUES
(1, 'IT'),
(2, 'Sales');

INSERT INTO TimeLogs (LogID, EmployeeID, DepartmentID, OvertimeHours, LogDate) VALUES
(1, 101, 1, 12, '2023-03-01'),
(2, 102, 1, 15, '2023-03-08'),
(3, 103, 2, 9, '2023-03-05'),
(4, 104, 1, 20, '2023-03-15'),
(5, 104, 1, 25, '2023-03-22');

=====================================================================================================================================
=====================================================================================================================================
=====================================================================================================================================